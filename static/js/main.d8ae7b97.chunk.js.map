{"version":3,"sources":["components/Misclassification.js","components/Gini.js","components/Entropy.js","components/Dataset.js","components/Footer.js","components/Plot.js","App.js","index.js"],"names":["Misclassification","props","get_top","pivot","dataset","data","i","length","x2","push","get_bottom","get_left","x1","get_right","get_max_class_num","class_freq","max","forEach","class","calculate_x1","sort","a","b","x1_pivot","result","exists","left_data","right_data","missclass_left","missclass_right","isNaN","missclassification","state","min_error","setState","q1","q2","calculate_x2","x2_pivot","top_data","bottom_data","missclass_top","missclass_bottom","setSplit","x","val","selected_split","clearSplitState","onUpdateClearSplitState","onSplitSelected","subdata","preview","onPreview","bind","split_x1","this","split_x2","className","node","width","onMouseOver","map","s","idx","axis","value","onClick","Math","trunc","colSpan","React","Component","Gini","get_class_freq","cls","num","get_classes","classes","includes","get_gini","cls_prob","gini_left","gini_right","gini","gini_top","gini_bottom","Entropy","get_entropy","entropy","log","entropy_left","entropy_right","entropy_top","entropy_bottom","Dataset","toggleDatasetPanel","e","dataset_table_open","construct_dataset_from_data","main_data","coord_1","coord_2","j","name","color","showDataset","style","padding","d","backgroundColor","getSplits","split","sub_data","clearClassification","calculate","onClearClassification","showCalculation","Footer","icon","faHeart","target","rel","href","Plot","getCoord","num_data","announcement","setTimeout","activeClass","construct_dataset","updateActiveClass","c","error","msg","removeClass","filter","clearSplits","removeDataset","createClass","used_colors","assigned_color","colors","reverse","u","used","updateChange","attr","draw_cell","cell","rightBorder","topBorder","lines","line","i2","j2","type","tooltip","current_coord","onMouseOut","col","row","showMoreNodesPopup","slice","clear_split","preview_height","preview_width","preview_left","preview_top","showCreateClassButton","textAlign","updateClearSplitState","showAnnouncement","showNodePopup","animationIn","animationOut","isVisible","previewSplit","cells","height","minWidth","paddingTop","left","top","key","placeholder","onChange","MouseTooltip","visible","offsetX","offsetY","App","plot_width","plot_height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8ae7b97.chunk.js","sourcesContent":["import React from 'react'\n\nclass Misclassification extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_max_class_num = (dataset) => {\n        let class_freq = {}\n        let max = 0\n        dataset.forEach((data) => {\n            class_freq[data.class] = (class_freq[data.class] || 0) + 1\n            if(class_freq[data.class] > max)\n                max = class_freq[data.class]\n        })\n        \n        return max\n    }\n\n    calculate_x1 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n            let missclass_left = 1 - (this.get_max_class_num(left_data) / left_data.length)\n            let missclass_right = 1 - (this.get_max_class_num(right_data) / right_data.length)\n\n            missclass_left = isNaN(missclass_left) ? 0: missclass_left\n            missclass_right = isNaN(missclass_right) ? 0: missclass_right\n\n            let missclassification = (missclass_left * left_data.length) + (missclass_right * right_data.length)\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                missclassification: missclassification,\n                q1: missclass_left,\n                q2: missclass_right,\n                left_data: left_data,\n                right_data: right_data\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let missclass_top = 1 - (this.get_max_class_num(top_data) / top_data.length)\n            let missclass_bottom = 1 - (this.get_max_class_num(bottom_data) / bottom_data.length)\n\n            missclass_top = isNaN(missclass_top) ? 0: missclass_top\n            missclass_bottom = isNaN(missclass_bottom) ? 0: missclass_bottom\n\n            let missclassification = (missclass_top * top_data.length) + (missclass_bottom * bottom_data.length)\n\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                missclassification: missclassification,\n                q1: missclass_bottom,\n                q2: missclass_top,\n                top_data: top_data,\n                bottom_data: bottom_data\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    preview = (subdata) => {\n        this.props.onPreview(subdata)\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu preview-node-container\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\" onMouseOver={() => {this.preview(this.props.subdata)}}>\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Missclassification\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>x {\"<\"} {s.x1_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Bottom Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Top Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Missclassification\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>y {\"<\"} {s.x2_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Misclassification;","import React from 'react'\n\nclass Gini extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_class_freq = (dataset, cls) => {\n        let num = 0\n        dataset.forEach((data) => {\n            if(data.class === cls) {\n                num += 1\n            }\n        })\n        return num\n    }\n\n    get_classes = (dataset) => {\n        let classes = []\n        dataset.forEach((data) => {\n            if(!classes.includes(data.class)) {\n                classes.push(data.class)\n            }\n        })\n\n        return classes\n    }\n\n    get_gini = (dataset) => {\n        let classes = this.get_classes(dataset)\n        let result = 0\n        classes.forEach((cls) => {\n            let cls_freq = this.get_class_freq(dataset, cls)\n            let cls_prob = cls_freq / dataset.length\n            let gini = cls_prob * (1 - cls_prob)\n            result += gini\n        })\n\n        return result\n    }\n\n    calculate_x1 = () => {\n        // Sort the dataset increasing order of x-coord\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n\n        // For each x-coord split, calculate the left and right dataset errors\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n\n            let gini_left = this.get_gini(left_data)\n            let gini_right = this.get_gini(right_data)\n\n            let gini = (gini_left * left_data.length) + (gini_right * right_data.length)\n\n            if(gini < this.state.min_error) {\n                this.setState({min_error: gini})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                gini: gini,\n                q1: gini_left,\n                q2: gini_right,\n                left_data: left_data,\n                right_data: right_data\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let gini_top = this.get_gini(top_data)\n            let gini_bottom = this.get_gini(bottom_data)\n\n            let gini = (gini_top * top_data.length) + (gini_bottom * bottom_data.length)\n\n            if(gini < this.state.min_error) {\n                this.setState({min_error: gini})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                gini: gini,\n                q1: gini_bottom,\n                q2: gini_top,\n                top_data: top_data,\n                bottom_data: bottom_data\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    preview = (subdata) => {\n        this.props.onPreview(subdata)\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu preview-node-container\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\" onMouseOver={() => {this.preview(this.props.subdata)}}>\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                GINI\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>x {\"<\"} {s.x1_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.gini*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.gini === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Bottom Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Top Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                GINI\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>y {\"<\"} {s.x2_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.gini*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.gini === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Gini;","import React from 'react'\n\nclass Entropy extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_class_freq = (dataset, cls) => {\n        let num = 0\n        dataset.forEach((data) => {\n            if(data.class === cls) {\n                num += 1\n            }\n        })\n        return num\n    }\n\n    get_classes = (dataset) => {\n        let classes = []\n        dataset.forEach((data) => {\n            if(!classes.includes(data.class)) {\n                classes.push(data.class)\n            }\n        })\n\n        return classes\n    }\n\n    get_entropy = (dataset) => {\n        let classes = this.get_classes(dataset)\n        let result = 0\n        classes.forEach((cls) => {\n            let cls_freq = this.get_class_freq(dataset, cls)\n            let cls_prob = cls_freq / dataset.length\n            let entropy = cls_prob * Math.log(cls_prob)\n            result += entropy\n        })\n\n        result = -result\n        return result\n    }\n\n    calculate_x1 = () => {\n        // Sort the dataset increasing order of x-coord\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n\n        // For each x-coord split, calculate the left and right dataset errors\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n\n            let entropy_left = this.get_entropy(left_data)\n            let entropy_right = this.get_entropy(right_data)\n\n            let entropy = (entropy_left * left_data.length) + (entropy_right * right_data.length)\n\n            if(entropy < this.state.min_error) {\n                this.setState({min_error: entropy})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                entropy: entropy,\n                q1: entropy_left,\n                q2: entropy_right,\n                left_data: left_data,\n                right_data: right_data\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let entropy_top = this.get_entropy(top_data)\n            let entropy_bottom = this.get_entropy(bottom_data)\n\n            let entropy = (entropy_top * top_data.length) + (entropy_bottom * bottom_data.length)\n\n            if(entropy < this.state.min_error) {\n                this.setState({min_error: entropy})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                entropy: entropy,\n                q1: entropy_bottom,\n                q2: entropy_top,\n                top_data: top_data,\n                bottom_data: bottom_data\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    preview = (subdata) => {\n        this.props.onPreview(subdata)\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu preview-node-container\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\" onMouseOver={() => {this.preview(this.props.subdata)}}>\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Entropy\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}\n                                        >\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>x {\"<\"} {s.x1_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.entropy*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.entropy === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Bottom Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Top Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Entropy\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>y {\"<\"} {s.x2_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.entropy*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.entropy === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Entropy;","import React from 'react'\nimport Misclassification from './Misclassification'\nimport Gini from './Gini'\nimport Entropy from './Entropy'\n\nclass Dataset extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataset_table_open: false,\n            calculate: false,\n            classes: []\n        }\n        this.toggleDatasetPanel = this.toggleDatasetPanel.bind(this);\n        this.clearClassification = this.clearClassification.bind(this)\n    }\n\n    toggleDatasetPanel = (e) => {\n        this.setState({\n            dataset_table_open: !this.state.dataset_table_open\n        })\n    }\n\n    construct_dataset_from_data = (subdata) => {\n        let main_data = this.props.data\n        let data = []\n\n        for(let i=subdata.coord_1[1]; i<=subdata.coord_2[1]; i++) {\n            for(let j=subdata.coord_1[0]; j<=subdata.coord_2[0]; j++) {\n                if(main_data[i][j] !== null) {\n                    data.push({\n                        x1: j,\n                        x2: this.props.data.length - 1 - i,\n                        class: this.props.data[i][j].name,\n                        color: this.props.data[i][j].color\n                    })\n                }\n            }\n        }\n\n        return data\n    }\n\n    showDataset = () => {\n        let dataset = this.props.dataset\n\n        if(dataset.length === 0) {\n            return(\n                <div className=\"row table-header\" style={{padding: \"20px\"}}>\n                    There is no data. <br />Create class and plot in the above graph to generate dataset.\n                </div>\n            )\n        }\n        return(\n            <div>\n            <h2>Dataset</h2>\n            <div className=\"row table-header\">\n                <div className=\"col-3-sm\">\n                    X\n                </div>\n                <div className=\"col-3-sm\">\n                    Y\n                </div>\n                <div className=\"col-3-sm\">\n                    Class\n                </div>\n                <div className=\"col-3-sm\">\n                    Color\n                </div>\n            </div>\n\n            <div className=\"horizontal-line\"></div>\n\n            {dataset.map((d, idx) => {\n                return(\n                    <div className=\"row table-data\" key={idx}>\n                        <div className=\"col-3-sm\">\n                            {d.x1}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            {d.x2}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            {d.class}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            <div className=\"color\" style={{backgroundColor: d.color}}></div>\n                        </div>\n                    </div>\n                )\n            })}\n            <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n\n    getSplits = (split, sub_data) => {\n        this.props.onSplitSelected(split, sub_data)\n    }\n\n    clearClassification = () => {\n        this.setState({\n            calculate: false\n        })\n\n        this.props.onClearClassification()\n    }\n\n    showCalculation = () => {\n        if(this.state.calculate === 'miss') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Misclassification \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onPreview={this.props.onPreview}\n                                        onSplitSelected={this.getSplits}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else if(this.state.calculate === 'gini') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Gini \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onPreview={this.props.onPreview}\n                                        onSplitSelected={this.getSplits}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else if(this.state.calculate === 'entropy') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Entropy \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onSplitSelected={this.getSplits}\n                                        onPreview={this.props.onPreview}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else{\n            if(this.props.dataset.length>0) {\n                if(this.props.classes.length > 1) {\n                    return(\n                        <div className=\"neu\">\n                            <h3>Choose error measures</h3>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'miss'})}>Misclassification Rate</div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'entropy'})}>Entropy</div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'gini'})}>GINI Index</div>\n                                </div>\n                            </div>\n                            <div className=\"spacer\"></div>\n                        </div>\n                    )\n                }\n            }\n        }\n        \n        \n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12-sm\">\n                        <div className=\"collapsible-button\" onClick={(e)=>this.toggleDatasetPanel(e)}>\n                            {this.state.dataset_table_open ? \"Hide\" : \"Show\"} Dataset\n                        </div>\n                    </div>\n                </div>\n                <div className=\"neu\" style={{backgroundColor: \"#fff\"}}>\n                    {this.state.dataset_table_open ? this.showDataset() : null}\n                </div>\n                {this.state.dataset_table_open ? <div className=\"spacer\"></div> : null}\n                {\n                    this.showCalculation()\n                }\n                \n            </div>\n            \n        )\n    }\n}\n\nexport default Dataset","import React from 'react'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass Footer extends React.Component {\n    render() {\n        return(\n            <div className=\"footer\">\n                Created with <FontAwesomeIcon icon={faHeart} /> by <a target=\"_blank\" rel=\"noreferrer\" href=\"https://shubhomoy.github.io\">Shubhomoy</a>\n            </div>\n        )\n    }\n}\n\nexport default Footer","import React from 'react'\nimport Dataset from './Dataset'\nimport Footer from './Footer'\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\nimport {Animated} from 'react-animated-css'\n\n\nclass Plot extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            'activeClass': null,\n            'classes': [],\n            'data': [],\n            'lines': [],\n            'sub_data': [],\n            'colors': ['red', 'blue', 'green', '#9c27b0', '#ffc107'],\n            'dataset': [],\n            'clear_split': false,\n            'num_data': 0,\n            'announcement': null,\n            'tooltip': false,\n            'current_coord': null,\n            'showMoreNodesPopup': false,\n            'preview_left': '0px',\n            'preview_top': '0px',\n            'preview_width': '0px',\n            'preview_height': '0px'\n        }\n\n        this.updateActiveClass = this.updateActiveClass.bind(this);\n        this.updateChange = this.updateChange.bind(this);\n        this.createClass = this.createClass.bind(this);\n        this.getCoord = this.getCoord.bind(this);\n        this.construct_dataset = this.construct_dataset.bind(this)\n    }\n\n    componentDidMount() {\n        let cells = [];\n        for(let i=0; i<this.props.height; i++) {\n            let row = [];\n            for(let j=0; j<this.props.width; j++) {\n                row.push(null)\n            }\n            cells.push(row);\n        }\n        let sub_data = [{\n            coord_1: [0, 0],\n            coord_2: [39, 39]\n        }]\n\n        this.setState({\n            data: cells,\n            sub_data: sub_data\n        })\n    }\n\n    getCoord = (i, j) => {\n        if(this.state.classes.length === 0)\n            return\n\n        let data = [...this.state.data]\n        let num_data = this.state.num_data\n\n        if(data[i][j] !== null) {\n            data[i][j] = null\n            num_data -= 1\n        }else {\n            if(num_data >= 40) {\n                this.setState({\n                    announcement: \"No more datapoints can be plotted. Please remove existing datapoints.\"\n                })\n                setTimeout(() => {this.setState({\n                    announcement: null\n                })}, 5000)\n                return\n            }\n            data[i][j] = this.state.activeClass\n            num_data += 1\n        }\n            \n        this.setState({\n            data: data,\n            num_data: num_data\n        })\n\n        this.construct_dataset()\n    }\n\n    updateActiveClass = (c, idx) => {\n        let classes = this.state.classes\n        if(c.name !== \"\") {\n            let exists = false\n            classes.forEach((cls) => {\n                if(cls.name === c.name && cls.color !== c.color) {\n                    exists = true\n                    return\n                }\n            })\n\n            if(exists) {\n                classes[idx].error = \"Class already exist. Try different name\"\n                classes[idx].msg = \"\"\n            }else{\n                classes[idx].msg = \"You can now start adding data corresponding to this class in the plot\"\n                classes[idx].error = \"\"\n                this.setState({\n                    'activeClass': c\n                });\n            }\n        }else{\n            classes[idx].error = \"Specify name first\"\n            classes[idx].msg = \"\"\n        }\n        this.setState({\n            'classes': classes\n        });\n    }\n\n    removeClass = (c) => {\n        // Remove every point from the plot\n        let data = this.state.data;\n        for(let i=0; i<data.length; i++) {\n            for(let j=0; j<data[i].length; j++) {\n                if(data[i][j] !== null && data[i][j].name === c.name) {\n                    data[i][j] = null;\n                }\n            }\n        }\n\n        // Remove the class from state\n        let classes = this.state.classes;\n        classes = classes.filter((cls) => {\n            return cls.name !== c.name\n        })\n\n        this.setState({\n            data: data,\n            classes: classes\n        })\n\n        // clear decision boundaries\n        this.clearSplits()\n        this.removeDataset(c)\n    }\n\n    removeDataset = (c) => {\n        let dataset = [...this.state.dataset]\n        dataset = dataset.filter((d) => {\n            return d.class !== c.name\n        })\n\n        this.setState({\n            dataset: dataset\n        })\n    }\n\n    // Adds class input fields\n    createClass = () => {\n        let classes = this.state.classes\n        let used_colors = []\n        let assigned_color = null;\n        \n        classes.forEach((cls) => {\n            used_colors.push(cls.color)\n        })\n\n        this.state.colors.reverse().forEach((color) => {\n            let u = false\n            used_colors.forEach((used) => {\n                if(used === color)\n                    u = true\n            })\n\n            if(!u) {\n                assigned_color = color\n                return\n            }\n        })\n        \n\n        classes.push({\n            name: '',\n            color: assigned_color,\n            error: '',\n            msg: ''\n        })\n\n        this.setState({\n            classes: classes\n        })\n    }\n\n    updateChange = (e, idx, attr) => {\n        let classes = this.state.classes\n        classes[idx][attr] = e\n        this.setState({\n            classes: classes\n        })\n    }\n\n    draw_cell = (i, j, cell) => {\n        let rightBorder = ''\n        let topBorder = ''\n\n        this.state.lines.forEach((line) => {\n            let x1 = line.x1\n            let x2 = line.x2\n\n            if(i >= x2[0] && i <= x2[1] && j >= x1[0] && j <= x1[1]) {\n\n                for(let i2=x2[0]; i2<=x2[1]; i2++) {\n                    for(let j2=x1[0]; j2<=x1[1]; j2++) {\n                        if(i === i2 && j === j2) {\n                            if(line.type === 'h') {\n                                topBorder = 'top-border'\n                            }else{\n                                rightBorder = 'right-border'\n                            }\n                            return\n                        }\n                    }\n                }\n            }\n        })\n\n        return(\n            <div key={i + \" - \" + j} className={\"cell \" + rightBorder + \" \" + topBorder} onClick={() => this.getCoord(i, j)} \n                onMouseOver={(e) => this.setState({tooltip: true, current_coord: \"x=\" + j + \", y=\" + (39-i)})}\n                onMouseOut={(e) => this.setState({tooltip: false})}>\n                {cell ? <div className=\"assigned\" style={{backgroundColor: cell.color}}></div> : ''}\n            </div>\n        )\n    }\n\n    getSplits = (split, sub_data) => {\n        let lines = this.state.lines\n        let q1 = null, q2 = null\n\n        if(split.axis === 'x1') {\n            let col = split.value - 0.5\n            lines.push({\n                x1: [col, col],\n                x2: [sub_data.coord_1[1], sub_data.coord_2[1]],\n                type: 'v'\n            })\n\n            // left part\n            if(col > 0) {\n                q1 = {\n                    coord_1: [...sub_data.coord_1],\n                    coord_2: [col, sub_data.coord_2[1]]\n                }\n            }\n\n            // right part\n            if(col < 39) {\n                q2 = {\n                    coord_1: [col + 1, sub_data.coord_1[1]],\n                    coord_2: [...sub_data.coord_2]\n                }\n            }\n            \n        }else{\n            let row = split.value - 0.5\n            lines.push({\n                x1: [sub_data.coord_1[0], sub_data.coord_2[0]],\n                x2: [39 - row, 39 - row],\n                type: 'h'\n            })\n\n            // bottom part\n            if(row > 0) {\n                q1 = {\n                    coord_1: [sub_data.coord_1[0], 39 - row],\n                    coord_2: [...sub_data.coord_2]\n                }\n            }\n\n            // top part\n            if(row < 39) {\n                q2 = {\n                    coord_1: [...sub_data.coord_1],\n                    coord_2: [sub_data.coord_2[0], 39 - row - 1]\n                }\n            }\n        }\n\n        let data = [...this.state.sub_data]\n        \n        if(q1 !== null)\n            data.push(q1)\n\n        if(q2 !== null)\n            data.push(q2)\n\n        this.setState({\n            lines: lines,\n            sub_data: data,\n            showMoreNodesPopup: true\n        })\n\n        setTimeout(() => {\n            this.setState({showMoreNodesPopup: false})\n        }, 5000)\n    }\n\n    clearSplits = () => {\n        let subdata = [...this.state.sub_data]\n        subdata = subdata.slice(0, 1)\n        this.setState({\n            lines: [],\n            sub_data: subdata,\n            clear_split: true,\n            preview_height: '0px',\n            preview_width: '0px',\n            preview_left: '0px',\n            preview_top: '0px'\n        })\n    }\n\n    showCreateClassButton = () => {\n        return(\n            <div className=\"row\">\n                <div className=\"col-12-sm\" style={{textAlign: \"center\"}}>\n                    <button className=\"create-class-btn\" onClick={this.createClass}>\n                        Create Class\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    construct_dataset = () => {\n        let data = []\n        for(let i=0; i<this.state.data.length; i++) {\n            for(let j=0; j<this.state.data[i].length; j++) {\n                if(this.state.data[i][j] !== null) {\n                    data.push({\n                        x1: j,\n                        x2: this.state.data.length - 1 - i,\n                        class: this.state.data[i][j].name,\n                        color: this.state.data[i][j].color\n                    })\n                }\n            }\n        }\n\n        this.clearSplits()\n\n        this.setState({\n            dataset: data\n        })\n    }\n\n    updateClearSplitState = () => {\n        if (this.state.clear_split) {\n            this.setState({\n                clear_split: false\n            })\n        }\n    }\n\n    showAnnouncement = () => {\n        if(this.state.announcement != null) {\n            return(\n                <div className=\"row\">\n                    <div className=\"col-12 announcement\">\n                        {this.state.announcement}\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    showNodePopup = () => {\n        return(\n            <div className=\"popup-message-container row\">\n                <div className=\"col-3\"></div>\n                <Animated animationIn=\"bounceInUp\" animationOut=\"bounceOutDown\" isVisible={this.state.showMoreNodesPopup}>\n                <div className=\"popup-message col-6\">\n                    Split has been made in the plot and more nodes are added at the bottom!\n                </div>\n                </Animated>\n                <div className=\"col-3\"></div>\n            </div>\n        )\n    }\n\n    previewSplit = (subdata) => {\n        this.setState({\n            preview_left: subdata.coord_1[0] * 10 + 'px',\n            preview_top: subdata.coord_1[1] * 10 + 'px',\n            preview_width: (subdata.coord_2[0] + 1)*10 - subdata.coord_1[0] * 10 + 'px',\n            preview_height: (subdata.coord_2[1] + 1)*10 - subdata.coord_1[1] * 10 + 'px'\n        })\n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"left-pane\">\n                    <div className=\"spacer\"></div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div style={{minWidth: \"440px\"}}>\n                                        <div className=\"tick-x2-container\">\n                                            <div className=\"x2-tick\" style={{paddingTop: \"35px\"}}>35</div>\n                                            <div className=\"x2-tick\">30</div>\n                                            <div className=\"x2-tick\">25</div>\n                                            <div className=\"x2-tick\" style={{paddingTop: \"27px\"}}>20</div>\n                                            <div className=\"x2-tick\">15</div>\n                                            <div className=\"x2-tick\" style={{paddingTop: \"27px\"}}>10</div>\n                                            <div className=\"x2-tick\" style={{height: \"85px\"}}>5</div>\n                                        </div>\n                                        <div className=\"plot-container\">\n                                            {\n                                                this.state.data.map((row, i) => {\n                                                    return row.map((cell, j) => {\n                                                        return this.draw_cell(i, j, cell)\n                                                    })\n                                                })\n                                            }\n\n                                            <div className=\"preview-overlay\" style={{left: this.state.preview_left, top: this.state.preview_top, width: this.state.preview_width, height: this.state.preview_height}}></div>\n                                        </div>\n                                        <div className=\"tick-x1-container\">\n                                            <div className=\"x1-tick\" style={{width: \"10px\"}}>0</div>\n                                            <div className=\"x1-tick\" style={{width: \"50px\"}}>5</div>\n                                            <div className=\"x1-tick\" style={{width: \"55px\"}}>10</div>\n                                            <div className=\"x1-tick\">15</div>\n                                            <div className=\"x1-tick\">20</div>\n                                            <div className=\"x1-tick\">25</div>\n                                            <div className=\"x1-tick\">30</div>\n                                            <div className=\"x1-tick\">35</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    {this.showAnnouncement()}\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"neu-2 class-entry-container\">\n                                        {this.state.classes.map((cls, key) => {\n                                            return(\n                                                <div key={key} className=\"class-container\">\n                                                    <div className=\"row\">\n                                                        <div className=\"col-12\">\n                                                            <div className=\"selected_color\" style={{backgroundColor: cls.color}}></div>\n                                                            <input className=\"class-text\" type=\"text\" placeholder=\"Class Name\" value={this.state.classes[key].name} onChange={e => this.updateChange(e.target.value, key, 'name')}/>\n                                                            <div className=\"remove-class-btn\" onClick={() => this.removeClass(cls)}>X</div>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"row\">    \n                                                        <div className=\"col-12-sm\">\n                                                            <center>\n                                                            <button className={this.state.activeClass === cls ? \"add-to-graph-selected\": \"add-to-graph\"} onClick={() => this.updateActiveClass(cls, key)}>\n                                                                {this.state.activeClass === cls ? \"Selected\": \"Add to plot\"}\n                                                            </button>\n                                                            </center>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"row\">    \n                                                        <div className=\"col-12-sm\">\n                                                            <center>\n                                                            {this.state.activeClass === cls ? cls.msg: cls.error}\n                                                            </center>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            )\n                                        })}\n\n                                        {this.state.classes.length < 5 ? this.showCreateClassButton(): null}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <MouseTooltip\n                        className=\"tooltip\"\n                        visible={this.state.tooltip}\n                        offsetX={15}\n                        offsetY={10}>\n                        <span>{this.state.current_coord}</span>\n                    </MouseTooltip>\n                </div>\n\n\n\n                <div className=\"right-pane\">\n                    <div className=\"row\" style={{height: \"100%\"}}>\n                        <div className=\"col-12\">\n                            <div className=\"row\">\n                                <div className=\"col-12-sm\">\n                                    <h1 className=\"site-title\">Interactive Decision Trees</h1>\n                                </div>\n                            </div>\n                            <Dataset \n                                data={this.state.data} \n                                subdata={this.state.sub_data} \n                                dataset={this.state.dataset} \n                                classes={this.state.classes}\n                                clearSplitState={this.state.clear_split} \n                                onSplitSelected={this.getSplits} \n                                onClearClassification={this.clearSplits}\n                                onPreview={this.previewSplit}\n                                onUpdateClearSplitState={this.updateClearSplitState} />\n\n                            {this.state.showMoreNodesPopup ? this.showNodePopup(): null}\n                        </div>\n                    </div>\n                    <Footer />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Plot;","import React from 'react';\nimport Plot from './components/Plot'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      'plot_width': 40,\n      'plot_height': 40\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Plot width={this.state.plot_width} height={this.state.plot_height} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}