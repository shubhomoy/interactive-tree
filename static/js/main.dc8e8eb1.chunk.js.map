{"version":3,"sources":["components/Misclassification.js","components/Gini.js","components/Entropy.js","components/Dataset.js","components/Plot.js","components/Footer.js","App.js","index.js"],"names":["Misclassification","props","get_top","pivot","dataset","data","i","length","x2","push","get_bottom","get_left","x1","get_right","get_max_class_num","class_freq","max","forEach","class","calculate_x1","sort","a","b","x1_pivot","result","exists","left_data","right_data","missclass_left","missclass_right","isNaN","missclassification","state","min_error","setState","q1","q2","calculate_x2","x2_pivot","top_data","bottom_data","missclass_top","missclass_bottom","setSplit","x","val","selected_split","clearSplitState","onUpdateClearSplitState","onSplitSelected","subdata","bind","split_x1","this","split_x2","className","node","width","map","s","idx","axis","value","onClick","Math","trunc","colSpan","React","Component","Gini","get_class_freq","cls","num","get_classes","classes","includes","get_gini","cls_prob","gini_left","gini_right","gini","gini_top","gini_bottom","Entropy","get_entropy","entropy","log","entropy_left","entropy_right","entropy_top","entropy_bottom","Dataset","toggleDatasetPanel","e","dataset_table_open","construct_dataset_from_data","main_data","coord_1","coord_2","j","name","color","showDataset","style","padding","d","backgroundColor","getSplits","split","sub_data","clearClassification","calculate","onClearClassification","showCalculation","Plot","getCoord","num_data","announcement","setTimeout","activeClass","construct_dataset","updateActiveClass","c","error","msg","removeClass","filter","clearSplits","removeDataset","createClass","used_colors","assigned_color","colors","reverse","u","used","updateChange","attr","draw_cell","cell","rightBorder","topBorder","lines","line","i2","j2","type","onMouseOver","tooltip","current_coord","onMouseOut","col","row","showMoreNodesPopup","slice","clear_split","showCreateClassButton","textAlign","updateClearSplitState","showAnnouncement","showNodePopup","animationIn","animationOut","isVisible","cells","height","minWidth","paddingTop","key","placeholder","onChange","target","MouseTooltip","visible","offsetX","offsetY","Footer","icon","faHeart","rel","href","App","plot_width","plot_height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc8e8eb1.chunk.js","sourcesContent":["import React from 'react'\n\nclass Misclassification extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_max_class_num = (dataset) => {\n        let class_freq = {}\n        let max = 0\n        dataset.forEach((data) => {\n            class_freq[data.class] = (class_freq[data.class] || 0) + 1\n            if(class_freq[data.class] > max)\n                max = class_freq[data.class]\n        })\n        \n        return max\n    }\n\n    calculate_x1 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n            let missclass_left = 1 - (this.get_max_class_num(left_data) / left_data.length)\n            let missclass_right = 1 - (this.get_max_class_num(right_data) / right_data.length)\n\n            missclass_left = isNaN(missclass_left) ? 0: missclass_left\n            missclass_right = isNaN(missclass_right) ? 0: missclass_right\n\n            let missclassification = (missclass_left * left_data.length) + (missclass_right * right_data.length)\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                missclassification: missclassification,\n                q1: missclass_left,\n                q2: missclass_right,\n                left_data: left_data,\n                right_data: right_data\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let missclass_top = 1 - (this.get_max_class_num(top_data) / top_data.length)\n            let missclass_bottom = 1 - (this.get_max_class_num(bottom_data) / bottom_data.length)\n\n            missclass_top = isNaN(missclass_top) ? 0: missclass_top\n            missclass_bottom = isNaN(missclass_bottom) ? 0: missclass_bottom\n\n            let missclassification = (missclass_top * top_data.length) + (missclass_bottom * bottom_data.length)\n\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                missclassification: missclassification,\n                q1: missclass_bottom,\n                q2: missclass_top,\n                top_data: top_data,\n                bottom_data: bottom_data\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\">\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                Threshold Values\n                            </td>\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left or Bottom Region)\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right or Top Region)\n                            </td>\n                            <td>\n                                Missclassification\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            x {\"<\"} {s.x1_pivot}\n                                        </td>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            y {\"<\"} {s.x2_pivot}\n                                        </td>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Misclassification;","import React from 'react'\n\nclass Gini extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_class_freq = (dataset, cls) => {\n        let num = 0\n        dataset.forEach((data) => {\n            if(data.class === cls) {\n                num += 1\n            }\n        })\n        return num\n    }\n\n    get_classes = (dataset) => {\n        let classes = []\n        dataset.forEach((data) => {\n            if(!classes.includes(data.class)) {\n                classes.push(data.class)\n            }\n        })\n\n        return classes\n    }\n\n    get_gini = (dataset) => {\n        let classes = this.get_classes(dataset)\n        let result = 0\n        classes.forEach((cls) => {\n            let cls_freq = this.get_class_freq(dataset, cls)\n            let cls_prob = cls_freq / dataset.length\n            let gini = cls_prob * (1 - cls_prob)\n            result += gini\n        })\n\n        return result\n    }\n\n    calculate_x1 = () => {\n        // Sort the dataset increasing order of x-coord\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n\n        // For each x-coord split, calculate the left and right dataset errors\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n\n            let gini_left = this.get_gini(left_data)\n            let gini_right = this.get_gini(right_data)\n\n            let gini = (gini_left * left_data.length) + (gini_right * right_data.length)\n\n            if(gini < this.state.min_error) {\n                this.setState({min_error: gini})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                gini: gini,\n                q1: gini_left,\n                q2: gini_right,\n                left_data: left_data,\n                right_data: right_data\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let gini_top = this.get_gini(top_data)\n            let gini_bottom = this.get_gini(bottom_data)\n\n            let gini = (gini_top * top_data.length) + (gini_bottom * bottom_data.length)\n\n            if(gini < this.state.min_error) {\n                this.setState({min_error: gini})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                gini: gini,\n                q1: gini_bottom,\n                q2: gini_top,\n                top_data: top_data,\n                bottom_data: bottom_data\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\">\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                Threshold Values\n                            </td>\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left or Bottom Region)\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right or Top Region)\n                            </td>\n                            <td>\n                                GINI\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            x {\"<\"} {s.x1_pivot}\n                                        </td>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.gini*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.gini === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            y {\"<\"} {s.x2_pivot}\n                                        </td>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.gini*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.gini === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Gini;","import React from 'react'\n\nclass Entropy extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_class_freq = (dataset, cls) => {\n        let num = 0\n        dataset.forEach((data) => {\n            if(data.class === cls) {\n                num += 1\n            }\n        })\n        return num\n    }\n\n    get_classes = (dataset) => {\n        let classes = []\n        dataset.forEach((data) => {\n            if(!classes.includes(data.class)) {\n                classes.push(data.class)\n            }\n        })\n\n        return classes\n    }\n\n    get_entropy = (dataset) => {\n        let classes = this.get_classes(dataset)\n        let result = 0\n        classes.forEach((cls) => {\n            let cls_freq = this.get_class_freq(dataset, cls)\n            let cls_prob = cls_freq / dataset.length\n            let entropy = cls_prob * Math.log(cls_prob)\n            result += entropy\n        })\n\n        result = -result\n        return result\n    }\n\n    calculate_x1 = () => {\n        // Sort the dataset increasing order of x-coord\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n\n        // For each x-coord split, calculate the left and right dataset errors\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n\n            let entropy_left = this.get_entropy(left_data)\n            let entropy_right = this.get_entropy(right_data)\n\n            let entropy = (entropy_left * left_data.length) + (entropy_right * right_data.length)\n\n            if(entropy < this.state.min_error) {\n                this.setState({min_error: entropy})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                entropy: entropy,\n                q1: entropy_left,\n                q2: entropy_right,\n                left_data: left_data,\n                right_data: right_data\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let entropy_top = this.get_entropy(top_data)\n            let entropy_bottom = this.get_entropy(bottom_data)\n\n            let entropy = (entropy_top * top_data.length) + (entropy_bottom * bottom_data.length)\n\n            if(entropy < this.state.min_error) {\n                this.setState({min_error: entropy})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                entropy: entropy,\n                q1: entropy_bottom,\n                q2: entropy_top,\n                top_data: top_data,\n                bottom_data: bottom_data\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\">\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                Threshold Values\n                            </td>\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left or Bottom Region)\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right or Top Region)\n                            </td>\n                            <td>\n                                Entropy\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            x {\"<\"} {s.x1_pivot}\n                                        </td>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.entropy*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.entropy === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            y {\"<\"} {s.x2_pivot}\n                                        </td>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td>\n                                            {Math.trunc(s.entropy*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.entropy === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Entropy;","import React from 'react'\nimport Misclassification from './Misclassification'\nimport Gini from './Gini'\nimport Entropy from './Entropy'\n\nclass Dataset extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataset_table_open: false,\n            calculate: false,\n            classes: []\n        }\n        this.toggleDatasetPanel = this.toggleDatasetPanel.bind(this);\n        this.clearClassification = this.clearClassification.bind(this)\n    }\n\n    toggleDatasetPanel = (e) => {\n        this.setState({\n            dataset_table_open: !this.state.dataset_table_open\n        })\n    }\n\n    construct_dataset_from_data = (subdata) => {\n        let main_data = this.props.data\n        let data = []\n\n        for(let i=subdata.coord_1[1]; i<=subdata.coord_2[1]; i++) {\n            for(let j=subdata.coord_1[0]; j<=subdata.coord_2[0]; j++) {\n                if(main_data[i][j] !== null) {\n                    data.push({\n                        x1: j,\n                        x2: this.props.data.length - 1 - i,\n                        class: this.props.data[i][j].name,\n                        color: this.props.data[i][j].color\n                    })\n                }\n            }\n        }\n\n        return data\n    }\n\n    showDataset = () => {\n        let dataset = this.props.dataset\n\n        if(dataset.length === 0) {\n            return(\n                <div className=\"row table-header\" style={{padding: \"20px\"}}>\n                    There is no data. <br />Create class and plot in the above graph to generate dataset.\n                </div>\n            )\n        }\n        return(\n            <div>\n            <h2>Dataset</h2>\n            <div className=\"row table-header\">\n                <div className=\"col-3-sm\">\n                    X\n                </div>\n                <div className=\"col-3-sm\">\n                    Y\n                </div>\n                <div className=\"col-3-sm\">\n                    Class\n                </div>\n                <div className=\"col-3-sm\">\n                    Color\n                </div>\n            </div>\n\n            <div className=\"horizontal-line\"></div>\n\n            {dataset.map((d, idx) => {\n                return(\n                    <div className=\"row table-data\" key={idx}>\n                        <div className=\"col-3-sm\">\n                            {d.x1}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            {d.x2}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            {d.class}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            <div className=\"color\" style={{backgroundColor: d.color}}></div>\n                        </div>\n                    </div>\n                )\n            })}\n            <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n\n    getSplits = (split, sub_data) => {\n        this.props.onSplitSelected(split, sub_data)\n    }\n\n    clearClassification = () => {\n        this.setState({\n            calculate: false\n        })\n\n        this.props.onClearClassification()\n    }\n\n    showCalculation = () => {\n        if(this.state.calculate === 'miss') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Misclassification \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onSplitSelected={this.getSplits}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else if(this.state.calculate === 'gini') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Gini \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onSplitSelected={this.getSplits}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else if(this.state.calculate === 'entropy') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Entropy \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onSplitSelected={this.getSplits}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else{\n            if(this.props.dataset.length>0) {\n                if(this.props.classes.length > 1) {\n                    return(\n                        <div className=\"neu\">\n                            <h3>Choose error measures</h3>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'miss'})}>Misclassification Rate</div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'entropy'})}>Entropy</div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'gini'})}>GINI Index</div>\n                                </div>\n                            </div>\n                            <div className=\"spacer\"></div>\n                        </div>\n                    )\n                }\n            }\n        }\n        \n        \n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12-sm\">\n                        <div className=\"collapsible-button\" onClick={(e)=>this.toggleDatasetPanel(e)}>\n                            {this.state.dataset_table_open ? \"Hide\" : \"Show\"} Dataset\n                        </div>\n                    </div>\n                </div>\n                <div className=\"neu\" style={{backgroundColor: \"#fff\"}}>\n                    {this.state.dataset_table_open ? this.showDataset() : null}\n                </div>\n                {this.state.dataset_table_open ? <div className=\"spacer\"></div> : null}\n                {\n                    this.showCalculation()\n                }\n                \n            </div>\n            \n        )\n    }\n}\n\nexport default Dataset","import React from 'react'\nimport Dataset from './Dataset'\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\nimport {Animated} from 'react-animated-css'\n\nclass Plot extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            'activeClass': null,\n            'classes': [],\n            'data': [],\n            'lines': [],\n            'sub_data': [],\n            'colors': ['red', 'blue', 'green', '#9c27b0', '#ffc107'],\n            'dataset': [],\n            'clear_split': false,\n            'num_data': 0,\n            'announcement': null,\n            'tooltip': false,\n            'current_coord': null,\n            'showMoreNodesPopup': false\n        }\n\n        this.updateActiveClass = this.updateActiveClass.bind(this);\n        this.updateChange = this.updateChange.bind(this);\n        this.createClass = this.createClass.bind(this);\n        this.getCoord = this.getCoord.bind(this);\n        this.construct_dataset = this.construct_dataset.bind(this)\n    }\n\n    componentDidMount() {\n        let cells = [];\n        for(let i=0; i<this.props.height; i++) {\n            let row = [];\n            for(let j=0; j<this.props.width; j++) {\n                row.push(null)\n            }\n            cells.push(row);\n        }\n        let sub_data = [{\n            coord_1: [0, 0],\n            coord_2: [39, 39]\n        }]\n\n        this.setState({\n            data: cells,\n            sub_data: sub_data\n        })\n    }\n\n    getCoord = (i, j) => {\n        if(this.state.classes.length === 0)\n            return\n\n        let data = [...this.state.data]\n        let num_data = this.state.num_data\n\n        if(data[i][j] !== null) {\n            data[i][j] = null\n            num_data -= 1\n        }else {\n            if(num_data >= 40) {\n                this.setState({\n                    announcement: \"No more datapoints can be plotted. Please remove existing datapoints.\"\n                })\n                setTimeout(() => {this.setState({\n                    announcement: null\n                })}, 5000)\n                return\n            }\n            data[i][j] = this.state.activeClass\n            num_data += 1\n        }\n            \n        this.setState({\n            data: data,\n            num_data: num_data\n        })\n\n        this.construct_dataset()\n    }\n\n    updateActiveClass = (c, idx) => {\n        let classes = this.state.classes\n        if(c.name !== \"\") {\n            let exists = false\n            classes.forEach((cls) => {\n                if(cls.name === c.name && cls.color !== c.color) {\n                    exists = true\n                    return\n                }\n            })\n\n            if(exists) {\n                classes[idx].error = \"Class already exist. Try different name\"\n                classes[idx].msg = \"\"\n            }else{\n                classes[idx].msg = \"You can now start adding data corresponding to this class in the plot\"\n                classes[idx].error = \"\"\n                this.setState({\n                    'activeClass': c\n                });\n            }\n        }else{\n            classes[idx].error = \"Specify name first\"\n            classes[idx].msg = \"\"\n        }\n        this.setState({\n            'classes': classes\n        });\n    }\n\n    removeClass = (c) => {\n        // Remove every point from the plot\n        let data = this.state.data;\n        for(let i=0; i<data.length; i++) {\n            for(let j=0; j<data[i].length; j++) {\n                if(data[i][j] !== null && data[i][j].name === c.name) {\n                    data[i][j] = null;\n                }\n            }\n        }\n\n        // Remove the class from state\n        let classes = this.state.classes;\n        classes = classes.filter((cls) => {\n            return cls.name !== c.name\n        })\n\n        this.setState({\n            data: data,\n            classes: classes\n        })\n\n        // clear decision boundaries\n        this.clearSplits()\n        this.removeDataset(c)\n    }\n\n    removeDataset = (c) => {\n        let dataset = [...this.state.dataset]\n        dataset = dataset.filter((d) => {\n            return d.class !== c.name\n        })\n\n        this.setState({\n            dataset: dataset\n        })\n    }\n\n    // Adds class input fields\n    createClass = () => {\n        let classes = this.state.classes\n        let used_colors = []\n        let assigned_color = null;\n        \n        classes.forEach((cls) => {\n            used_colors.push(cls.color)\n        })\n\n        this.state.colors.reverse().forEach((color) => {\n            let u = false\n            used_colors.forEach((used) => {\n                if(used === color)\n                    u = true\n            })\n\n            if(!u) {\n                assigned_color = color\n                return\n            }\n        })\n        \n\n        classes.push({\n            name: '',\n            color: assigned_color,\n            error: '',\n            msg: ''\n        })\n\n        this.setState({\n            classes: classes\n        })\n    }\n\n    updateChange = (e, idx, attr) => {\n        let classes = this.state.classes\n        classes[idx][attr] = e\n        this.setState({\n            classes: classes\n        })\n    }\n\n    draw_cell = (i, j, cell) => {\n        let rightBorder = ''\n        let topBorder = ''\n\n        this.state.lines.forEach((line) => {\n            let x1 = line.x1\n            let x2 = line.x2\n\n            if(i >= x2[0] && i <= x2[1] && j >= x1[0] && j <= x1[1]) {\n\n                for(let i2=x2[0]; i2<=x2[1]; i2++) {\n                    for(let j2=x1[0]; j2<=x1[1]; j2++) {\n                        if(i === i2 && j === j2) {\n                            if(line.type === 'h') {\n                                topBorder = 'top-border'\n                            }else{\n                                rightBorder = 'right-border'\n                            }\n                            return\n                        }\n                    }\n                }\n            }\n        })\n\n        return(\n            <div key={i + \" - \" + j} className={\"cell \" + rightBorder + \" \" + topBorder} onClick={() => this.getCoord(i, j)} \n                onMouseOver={(e) => this.setState({tooltip: true, current_coord: \"x=\" + j + \", y=\" + (39-i)})}\n                onMouseOut={(e) => this.setState({tooltip: false})}>\n                {cell ? <div className=\"assigned\" style={{backgroundColor: cell.color}}></div> : ''}\n            </div>\n        )\n    }\n\n    getSplits = (split, sub_data) => {\n        let lines = this.state.lines\n        let q1 = null, q2 = null\n\n        if(split.axis === 'x1') {\n            let col = split.value - 0.5\n            lines.push({\n                x1: [col, col],\n                x2: [sub_data.coord_1[1], sub_data.coord_2[1]],\n                type: 'v'\n            })\n\n            // left part\n            if(col > 0) {\n                q1 = {\n                    coord_1: [...sub_data.coord_1],\n                    coord_2: [col, sub_data.coord_2[1]]\n                }\n            }\n\n            // right part\n            if(col < 39) {\n                q2 = {\n                    coord_1: [col + 1, sub_data.coord_1[1]],\n                    coord_2: [...sub_data.coord_2]\n                }\n            }\n            \n        }else{\n            let row = split.value - 0.5\n            lines.push({\n                x1: [sub_data.coord_1[0], sub_data.coord_2[0]],\n                x2: [39 - row, 39 - row],\n                type: 'h'\n            })\n\n            // bottom part\n            if(row > 0) {\n                q1 = {\n                    coord_1: [sub_data.coord_1[0], 39 - row],\n                    coord_2: [...sub_data.coord_2]\n                }\n            }\n\n            // top part\n            if(row < 39) {\n                q2 = {\n                    coord_1: [...sub_data.coord_1],\n                    coord_2: [sub_data.coord_2[0], 39 - row - 1]\n                }\n            }\n        }\n\n        let data = [...this.state.sub_data]\n        \n        if(q1 !== null)\n            data.push(q1)\n\n        if(q2 !== null)\n            data.push(q2)\n\n        this.setState({\n            lines: lines,\n            sub_data: data,\n            showMoreNodesPopup: true\n        })\n\n        setTimeout(() => {\n            this.setState({showMoreNodesPopup: false})\n        }, 5000)\n    }\n\n    clearSplits = () => {\n        let subdata = [...this.state.sub_data]\n        subdata = subdata.slice(0, 1)\n        this.setState({\n            lines: [],\n            sub_data: subdata,\n            clear_split: true\n        })\n    }\n\n    showCreateClassButton = () => {\n        return(\n            <div className=\"row\">\n                <div className=\"col-12-sm\" style={{textAlign: \"center\"}}>\n                    <button className=\"create-class-btn\" onClick={this.createClass}>\n                        Create Class\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    construct_dataset = () => {\n        let data = []\n        for(let i=0; i<this.state.data.length; i++) {\n            for(let j=0; j<this.state.data[i].length; j++) {\n                if(this.state.data[i][j] !== null) {\n                    data.push({\n                        x1: j,\n                        x2: this.state.data.length - 1 - i,\n                        class: this.state.data[i][j].name,\n                        color: this.state.data[i][j].color\n                    })\n                }\n            }\n        }\n\n        this.clearSplits()\n\n        this.setState({\n            dataset: data\n        })\n    }\n\n    updateClearSplitState = () => {\n        if (this.state.clear_split) {\n            this.setState({\n                clear_split: false\n            })\n        }\n    }\n\n    showAnnouncement = () => {\n        if(this.state.announcement != null) {\n            return(\n                <div className=\"row\">\n                    <div className=\"col-12 announcement\">\n                        {this.state.announcement}\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    showNodePopup = () => {\n        return(\n            <div className=\"popup-message-container row\">\n                <div className=\"col-3\"></div>\n                <Animated animationIn=\"bounceInUp\" animationOut=\"bounceOutDown\" isVisible={this.state.showMoreNodesPopup}>\n                <div className=\"popup-message col-6\">\n                    Split has been made in the plot and more nodes are added at the bottom!\n                </div>\n                </Animated>\n                <div className=\"col-3\"></div>\n            </div>\n        )\n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-7\">\n                        <div style={{minWidth: \"440px\"}}>\n                            <div className=\"tick-x2-container\">\n                                <div className=\"x2-tick\" style={{paddingTop: \"35px\"}}>35</div>\n                                <div className=\"x2-tick\">30</div>\n                                <div className=\"x2-tick\">25</div>\n                                <div className=\"x2-tick\" style={{paddingTop: \"27px\"}}>20</div>\n                                <div className=\"x2-tick\">15</div>\n                                <div className=\"x2-tick\" style={{paddingTop: \"27px\"}}>10</div>\n                                <div className=\"x2-tick\" style={{height: \"85px\"}}>5</div>\n                            </div>\n                            <div className=\"plot-container\">\n                                {\n                                    this.state.data.map((row, i) => {\n                                        return row.map((cell, j) => {\n                                            return this.draw_cell(i, j, cell)\n                                        })\n                                    })\n                                }\n                            </div>\n                            <div className=\"tick-x1-container\">\n                                <div className=\"x1-tick\" style={{width: \"10px\"}}>0</div>\n                                <div className=\"x1-tick\" style={{width: \"50px\"}}>5</div>\n                                <div className=\"x1-tick\" style={{width: \"55px\"}}>10</div>\n                                <div className=\"x1-tick\">15</div>\n                                <div className=\"x1-tick\">20</div>\n                                <div className=\"x1-tick\">25</div>\n                                <div className=\"x1-tick\">30</div>\n                                <div className=\"x1-tick\">35</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div className=\"col-5\">\n                        <div className=\"neu-2 class-entry-container\">\n                            {this.state.classes.map((cls, key) => {\n                                return(\n                                    <div key={key} className=\"class-container\">\n                                        <div className=\"row\">\n                                            <div className=\"col-12\">\n                                                <div className=\"selected_color\" style={{backgroundColor: cls.color}}></div>\n                                                <input className=\"class-text\" type=\"text\" placeholder=\"Class Name\" value={this.state.classes[key].name} onChange={e => this.updateChange(e.target.value, key, 'name')}/>\n                                                <div className=\"remove-class-btn\" onClick={() => this.removeClass(cls)}>X</div>\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">    \n                                            <div className=\"col-12-sm\">\n                                                <center>\n                                                <button className={this.state.activeClass === cls ? \"add-to-graph-selected\": \"add-to-graph\"} onClick={() => this.updateActiveClass(cls, key)}>\n                                                    {this.state.activeClass === cls ? \"Selected\": \"Add to plot\"}\n                                                </button>\n                                                </center>\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">    \n                                            <div className=\"col-12-sm\">\n                                                <center>\n                                                {this.state.activeClass === cls ? cls.msg: cls.error}\n                                                </center>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n\n                            {this.state.classes.length < 5 ? this.showCreateClassButton(): null}\n                        </div>\n                    </div>\n\n                    <MouseTooltip\n                        className=\"tooltip\"\n                        visible={this.state.tooltip}\n                        offsetX={15}\n                        offsetY={10}>\n                        <span>{this.state.current_coord}</span>\n                    </MouseTooltip>\n\n                </div>\n                {/* Eng of class and plot */}\n                \n                {this.showAnnouncement()}\n\n                <Dataset \n                    data={this.state.data} \n                    subdata={this.state.sub_data} \n                    dataset={this.state.dataset} \n                    classes={this.state.classes}\n                    clearSplitState={this.state.clear_split} \n                    onSplitSelected={this.getSplits} \n                    onClearClassification={this.clearSplits}\n                    onUpdateClearSplitState={this.updateClearSplitState} />\n                <div className=\"spacer\"></div>\n\n\n                \n                {this.state.showMoreNodesPopup ? this.showNodePopup(): null}\n                \n            </div>\n        )\n    }\n}\n\nexport default Plot;","import React from 'react'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass Footer extends React.Component {\n    render() {\n        return(\n            <div className=\"footer\">\n                Created with <FontAwesomeIcon icon={faHeart} /> by <a target=\"_blank\" rel=\"noreferrer\" href=\"https://shubhomoy.github.io\">Shubhomoy</a>\n            </div>\n        )\n    }\n}\n\nexport default Footer","import React from 'react';\nimport Plot from './components/Plot'\nimport Footer from './components/Footer'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      'plot_width': 40,\n      'plot_height': 40\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12-sm\">\n            <h1 className=\"site-title\">Interactive Decision Trees</h1>\n          </div>\n        </div>\n        \n        <Plot width={this.state.plot_width} height={this.state.plot_height} />\n\n        <Footer />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}