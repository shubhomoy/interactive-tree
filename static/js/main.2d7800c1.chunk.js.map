{"version":3,"sources":["components/Misclassification.js","components/Gini.js","components/Entropy.js","components/Dataset.js","components/Footer.js","components/Plot.js","App.js","index.js"],"names":["Misclassification","props","get_top","pivot","dataset","data","i","length","x2","push","get_bottom","get_left","x1","get_right","get_max_class_num","class_freq","max","forEach","class","calculate_x1","sort","a","b","x1_pivot","result","exists","left_data","right_data","missclass_left","calculation_left","Math","trunc","isNaN","missclass_right","calculation_right","missclassification","state","min_error","setState","q1","q2","calculate_x2","x2_pivot","top_data","bottom_data","missclass_top","calculation_top","missclass_bottom","calculation_bottom","setSplit","x","val","selected_split","clearSplitState","onUpdateClearSplitState","onSplitSelected","subdata","preview","onPreview","showToolTip","text","tooltip","calculation","hideToolTip","bind","split_x1","this","split_x2","className","node","width","onMouseOver","map","s","idx","axis","value","onClick","onMouseOut","colSpan","MouseTooltip","visible","offsetX","offsetY","React","Component","Gini","get_class_freq","cls","num","get_classes","classes","includes","get_gini","cls_freq","cls_prob","gini","substring","gini_left","gini_right","gini_top","gini_bottom","Entropy","get_entropy","entropy","log","entropy_left","entropy_right","entropy_top","entropy_bottom","Dataset","toggleDatasetPanel","e","dataset_table_open","construct_dataset_from_data","main_data","coord_1","coord_2","j","name","color","showDataset","style","padding","d","backgroundColor","getSplits","split","sub_data","clearClassification","calculate","onClearClassification","showCalculation","Footer","icon","faHeart","target","rel","href","Plot","getCoord","num_data","announcement","setTimeout","activeClass","construct_dataset","updateActiveClass","c","error","msg","removeClass","filter","clearSplits","removeDataset","createClass","used_colors","assigned_color","colors","reverse","u","used","updateChange","attr","draw_cell","cell","rightBorder","topBorder","lines","line","i2","j2","type","current_coord","col","row","showMoreNodesPopup","slice","clear_split","preview_height","preview_width","preview_left","preview_top","showCreateClassButton","textAlign","updateClearSplitState","showAnnouncement","showNodePopup","animationIn","animationOut","isVisible","previewSplit","cells","height","minWidth","paddingTop","left","top","key","placeholder","onChange","App","plot_width","plot_height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d7800c1.chunk.js","sourcesContent":["import React from 'react'\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\n\nclass Misclassification extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999,\n            tooltip: false,\n            calculation: ''\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_max_class_num = (dataset) => {\n        let class_freq = {}\n        let max = 0\n        let calculation = ''\n        dataset.forEach((data) => {\n            class_freq[data.class] = (class_freq[data.class] || 0) + 1\n            if(class_freq[data.class] > max)\n                max = class_freq[data.class]\n        })\n        \n        return max\n    }\n\n    calculate_x1 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n            let missclass_left = 1 - (this.get_max_class_num(left_data) / left_data.length)\n            let calculation_left = \"1 - (\" + this.get_max_class_num(left_data) + \"/\" + left_data.length + \") = \" + Math.trunc((isNaN(missclass_left) ? 0: missclass_left)*100)/100\n\n            let missclass_right = 1 - (this.get_max_class_num(right_data) / right_data.length)\n            let calculation_right = \"1 - (\" + this.get_max_class_num(right_data) + \"/\" + right_data.length + \") = \" + Math.trunc((isNaN(missclass_right) ? 0: missclass_right)*100)/100\n\n            missclass_left = isNaN(missclass_left) ? 0: missclass_left\n            missclass_right = isNaN(missclass_right) ? 0: missclass_right\n\n            let missclassification = (missclass_left * left_data.length) + (missclass_right * right_data.length)\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                missclassification: missclassification,\n                q1: missclass_left,\n                q2: missclass_right,\n                left_data: left_data,\n                right_data: right_data,\n                calculation_left: calculation_left,\n                calculation_right: calculation_right\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let missclass_top = 1 - (this.get_max_class_num(top_data) / top_data.length)\n            let calculation_top = \"1 - (\" + this.get_max_class_num(top_data) + \"/\" + top_data.length + \") = \" + Math.trunc((isNaN(missclass_top) ? 0: missclass_top)*100)/100\n\n            let missclass_bottom = 1 - (this.get_max_class_num(bottom_data) / bottom_data.length)\n            let calculation_bottom = \"1 - (\" + this.get_max_class_num(bottom_data) + \"/\" + bottom_data.length + \") = \" + Math.trunc((isNaN(missclass_bottom) ? 0: missclass_bottom)*100)/100\n\n            missclass_top = isNaN(missclass_top) ? 0: missclass_top\n            missclass_bottom = isNaN(missclass_bottom) ? 0: missclass_bottom\n\n            let missclassification = (missclass_top * top_data.length) + (missclass_bottom * bottom_data.length)\n\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                missclassification: missclassification,\n                q1: missclass_bottom,\n                q2: missclass_top,\n                top_data: top_data,\n                bottom_data: bottom_data,\n                calculation_top: calculation_top,\n                calculation_bottom: calculation_bottom\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    preview = (subdata) => {\n        this.props.onPreview(subdata)\n    }\n\n    showToolTip = (text) => {\n        this.setState({\n            tooltip: true,\n            calculation: text\n        })\n    }\n\n    hideToolTip = () => {\n        this.setState({\n            tooltip: false,\n            calculation: ''\n        })\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu preview-node-container\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\" onMouseOver={() => {this.preview(this.props.subdata)}}>\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Missclassification (rounded)<br />\n                                n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_left)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>x {\"<\"} {s.x1_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td  onMouseOver={() => {this.showToolTip(s.calculation_right)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Bottom Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Top Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Missclassification (rounded)<br />\n                                n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_bottom)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>y {\"<\"} {s.x2_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_top)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n                <MouseTooltip\n                        className=\"tooltip\"\n                        visible={this.state.tooltip}\n                        offsetX={15}\n                        offsetY={10}>\n                        <span>{this.state.calculation}</span>\n                </MouseTooltip>\n            </div>\n        )\n    }\n}\n\nexport default Misclassification;","import React from 'react'\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\n\nclass Gini extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999,\n            tooltip: false,\n            calculation: ''\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_class_freq = (dataset, cls) => {\n        let num = 0\n        dataset.forEach((data) => {\n            if(data.class === cls) {\n                num += 1\n            }\n        })\n        return num\n    }\n\n    get_classes = (dataset) => {\n        let classes = []\n        dataset.forEach((data) => {\n            if(!classes.includes(data.class)) {\n                classes.push(data.class)\n            }\n        })\n\n        return classes\n    }\n\n    get_gini = (dataset) => {\n        let classes = this.get_classes(dataset)\n        let result = {\n            calculation: '',\n            result: 0\n        }\n        classes.forEach((cls) => {\n            let cls_freq = this.get_class_freq(dataset, cls)\n            let cls_prob = cls_freq / dataset.length\n            let gini = cls_prob * (1 - cls_prob)\n            result.calculation += '(' + cls_freq + \"/\" + dataset.length + \" * \" + (dataset.length-cls_freq) + \"/\" + dataset.length + ') + '\n            result.result += gini\n        })\n\n        result.calculation = result.calculation.substring(0, result.calculation.length - 3)\n        result.calculation += \" = \" + Math.trunc(result.result * 100) / 100\n\n        return result\n    }\n\n    calculate_x1 = () => {\n        // Sort the dataset increasing order of x-coord\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n\n        // For each x-coord split, calculate the left and right dataset errors\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n\n            let gini_left = this.get_gini(left_data)\n            let gini_right = this.get_gini(right_data)\n\n            let gini = (gini_left.result * left_data.length) + (gini_right.result * right_data.length)\n\n            if(gini < this.state.min_error) {\n                this.setState({min_error: gini})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                gini: gini,\n                q1: gini_left.result,\n                q2: gini_right.result,\n                left_data: left_data,\n                right_data: right_data,\n                calculation_left: gini_left.calculation,\n                calculation_right: gini_right.calculation\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let gini_top = this.get_gini(top_data)\n            let gini_bottom = this.get_gini(bottom_data)\n\n            let gini = (gini_top.result * top_data.length) + (gini_bottom.result * bottom_data.length)\n\n            if(gini < this.state.min_error) {\n                this.setState({min_error: gini})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                gini: gini,\n                q1: gini_bottom.result,\n                q2: gini_top.result,\n                top_data: top_data,\n                bottom_data: bottom_data,\n                calculation_bottom: gini_bottom.calculation,\n                calculation_top: gini_top.calculation\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    preview = (subdata) => {\n        this.props.onPreview(subdata)\n    }\n\n    showToolTip = (text) => {\n        this.setState({\n            tooltip: true,\n            calculation: text\n        })\n    }\n\n    hideToolTip = () => {\n        this.setState({\n            tooltip: false,\n            calculation: ''\n        })\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu preview-node-container\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\" onMouseOver={() => {this.preview(this.props.subdata)}}>\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                GINI (rounded)<br />\n                                n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_left)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>x {\"<\"} {s.x1_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_right)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.gini*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.gini === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Bottom Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Top Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                GINI  (rounded)<br />\n                                n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_bottom)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>y {\"<\"} {s.x2_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_top)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.gini*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.gini === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n                <MouseTooltip\n                        className=\"tooltip\"\n                        visible={this.state.tooltip}\n                        offsetX={15}\n                        offsetY={10}>\n                        <span>{this.state.calculation}</span>\n                </MouseTooltip>\n            </div>\n        )\n    }\n}\n\nexport default Gini;","import React from 'react'\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\n\nclass Entropy extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999,\n            tooltip: false,\n            calculation: ''\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_class_freq = (dataset, cls) => {\n        let num = 0\n        dataset.forEach((data) => {\n            if(data.class === cls) {\n                num += 1\n            }\n        })\n        return num\n    }\n\n    get_classes = (dataset) => {\n        let classes = []\n        dataset.forEach((data) => {\n            if(!classes.includes(data.class)) {\n                classes.push(data.class)\n            }\n        })\n\n        return classes\n    }\n\n    get_entropy = (dataset) => {\n        let classes = this.get_classes(dataset)\n        let result = {\n            result: 0,\n            calculation: ''\n        }\n        classes.forEach((cls) => {\n            let cls_freq = this.get_class_freq(dataset, cls)\n            let cls_prob = cls_freq / dataset.length\n            let entropy = cls_prob * Math.log(cls_prob)\n            result.calculation += '(' + cls_freq + \"/\" + dataset.length + \" * ln(\" + cls_freq + \"/\" + dataset.length + ')) + '\n            result.result += entropy\n        })\n\n        result.calculation = result.calculation.substring(0, result.calculation.length - 3)\n        result.calculation = \"-[ \" + result.calculation + \" ] = \" + -Math.trunc(result.result*100)/100\n        result.result = -result.result\n        return result\n    }\n\n    calculate_x1 = () => {\n        // Sort the dataset increasing order of x-coord\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n\n        // For each x-coord split, calculate the left and right dataset errors\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n\n            let entropy_left = this.get_entropy(left_data)\n            let entropy_right = this.get_entropy(right_data)\n\n            let entropy = (entropy_left.result * left_data.length) + (entropy_right.result * right_data.length)\n\n            if(entropy < this.state.min_error) {\n                this.setState({min_error: entropy})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                entropy: entropy,\n                q1: entropy_left.result,\n                q2: entropy_right.result,\n                left_data: left_data,\n                right_data: right_data,\n                calculation_left: entropy_left.calculation,\n                calculation_right: entropy_right.calculation\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let entropy_top = this.get_entropy(top_data)\n            let entropy_bottom = this.get_entropy(bottom_data)\n\n            let entropy = (entropy_top.result * top_data.length) + (entropy_bottom.result * bottom_data.length)\n\n            if(entropy < this.state.min_error) {\n                this.setState({min_error: entropy})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                entropy: entropy,\n                q1: entropy_bottom.result,\n                q2: entropy_top.result,\n                top_data: top_data,\n                bottom_data: bottom_data,\n                calculation_bottom: entropy_bottom.calculation,\n                calculation_top: entropy_top.calculation\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    preview = (subdata) => {\n        this.props.onPreview(subdata)\n    }\n\n    showToolTip = (text) => {\n        this.setState({\n            tooltip: true,\n            calculation: text\n        })\n    }\n\n    hideToolTip = () => {\n        this.setState({\n            tooltip: false,\n            calculation: ''\n        })\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu preview-node-container\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\" onMouseOver={() => {this.preview(this.props.subdata)}}>\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Entropy (rounded)<br />\n                                n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}\n                                        >\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_left)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>x {\"<\"} {s.x1_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_right)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.entropy*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.entropy === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Bottom Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Top Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                            Entropy (rounded)<br />\n                            n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_bottom)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>y {\"<\"} {s.x2_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_top)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.entropy*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.entropy === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n                <MouseTooltip\n                        className=\"tooltip\"\n                        visible={this.state.tooltip}\n                        offsetX={15}\n                        offsetY={10}>\n                        <span>{this.state.calculation}</span>\n                </MouseTooltip>\n            </div>\n        )\n    }\n}\n\nexport default Entropy;","import React from 'react'\nimport Misclassification from './Misclassification'\nimport Gini from './Gini'\nimport Entropy from './Entropy'\n\nclass Dataset extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            dataset_table_open: false,\n            calculate: false,\n            classes: []\n        }\n        this.toggleDatasetPanel = this.toggleDatasetPanel.bind(this);\n        this.clearClassification = this.clearClassification.bind(this)\n    }\n\n    toggleDatasetPanel = (e) => {\n        this.setState({\n            dataset_table_open: !this.state.dataset_table_open\n        })\n    }\n\n    construct_dataset_from_data = (subdata) => {\n        let main_data = this.props.data\n        let data = []\n\n        for(let i=subdata.coord_1[1]; i<=subdata.coord_2[1]; i++) {\n            for(let j=subdata.coord_1[0]; j<=subdata.coord_2[0]; j++) {\n                if(main_data[i][j] !== null) {\n                    data.push({\n                        x1: j,\n                        x2: this.props.data.length - 1 - i,\n                        class: this.props.data[i][j].name,\n                        color: this.props.data[i][j].color\n                    })\n                }\n            }\n        }\n\n        return data\n    }\n\n    showDataset = () => {\n        let dataset = this.props.dataset\n\n        if(dataset.length === 0) {\n            return(\n                <div className=\"row table-header\" style={{padding: \"20px\"}}>\n                    There is no data. <br />Create class and plot in the above graph to generate dataset.\n                </div>\n            )\n        }\n        return(\n            <div>\n            <h2>Dataset</h2>\n            <div className=\"row table-header\">\n                <div className=\"col-3-sm\">\n                    X\n                </div>\n                <div className=\"col-3-sm\">\n                    Y\n                </div>\n                <div className=\"col-3-sm\">\n                    Class\n                </div>\n                <div className=\"col-3-sm\">\n                    Color\n                </div>\n            </div>\n\n            <div className=\"horizontal-line\"></div>\n\n            {dataset.map((d, idx) => {\n                return(\n                    <div className=\"row table-data\" key={idx}>\n                        <div className=\"col-3-sm\">\n                            {d.x1}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            {d.x2}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            {d.class}\n                        </div>\n                        <div className=\"col-3-sm\">\n                            <div className=\"color\" style={{backgroundColor: d.color}}></div>\n                        </div>\n                    </div>\n                )\n            })}\n            <div className=\"spacer\"></div>\n            </div>\n        )\n    }\n\n    getSplits = (split, sub_data) => {\n        this.props.onSplitSelected(split, sub_data)\n    }\n\n    clearClassification = () => {\n        this.setState({\n            calculate: false\n        })\n\n        this.props.onClearClassification()\n    }\n\n    showCalculation = () => {\n        if(this.state.calculate === 'miss') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Misclassification \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onPreview={this.props.onPreview}\n                                        onSplitSelected={this.getSplits}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else if(this.state.calculate === 'gini') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Gini \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onPreview={this.props.onPreview}\n                                        onSplitSelected={this.getSplits}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else if(this.state.calculate === 'entropy') {\n            return(\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-12-sm\">\n                            <div onClick={(e)=>this.clearClassification()} className=\"collapsible-button-negative\">Clear Classification</div>\n                        </div>\n                    </div>\n                    {\n                        this.props.subdata.map((data, idx) => {\n                            return(\n                                <div key={idx}>\n                                    <Entropy \n                                        node={idx + 1}\n                                        clearSplitState={this.props.clearSplitState} \n                                        dataset={this.construct_dataset_from_data(data)} \n                                        subdata={data} \n                                        onSplitSelected={this.getSplits}\n                                        onPreview={this.props.onPreview}\n                                        onUpdateClearSplitState={this.props.onUpdateClearSplitState} />\n                                    <div className=\"spacer\"></div>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n        }else{\n            if(this.props.dataset.length>0) {\n                if(this.props.classes.length > 1) {\n                    return(\n                        <div className=\"neu\">\n                            <h3>Choose error measures</h3>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'miss'})}>Misclassification Rate</div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'entropy'})}>Entropy</div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"collapsible-button-positive\" onClick={(e)=>this.setState({calculate: 'gini'})}>GINI Index</div>\n                                </div>\n                            </div>\n                            <div className=\"spacer\"></div>\n                        </div>\n                    )\n                }\n            }\n        }\n        \n        \n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12-sm\">\n                        <div className=\"collapsible-button\" onClick={(e)=>this.toggleDatasetPanel(e)}>\n                            {this.state.dataset_table_open ? \"Hide\" : \"Show\"} Dataset\n                        </div>\n                    </div>\n                </div>\n                <div className=\"neu\" style={{backgroundColor: \"#fff\"}}>\n                    {this.state.dataset_table_open ? this.showDataset() : null}\n                </div>\n                {this.state.dataset_table_open ? <div className=\"spacer\"></div> : null}\n                {\n                    this.showCalculation()\n                }\n                \n            </div>\n            \n        )\n    }\n}\n\nexport default Dataset","import React from 'react'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass Footer extends React.Component {\n    render() {\n        return(\n            <div className=\"footer\">\n                Created with <FontAwesomeIcon icon={faHeart} /> by <a target=\"_blank\" rel=\"noreferrer\" href=\"https://shubhomoy.github.io\">Shubhomoy</a>\n            </div>\n        )\n    }\n}\n\nexport default Footer","import React from 'react'\nimport Dataset from './Dataset'\nimport Footer from './Footer'\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\nimport {Animated} from 'react-animated-css'\n\n\nclass Plot extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            'activeClass': null,\n            'classes': [],\n            'data': [],\n            'lines': [],\n            'sub_data': [],\n            'colors': ['red', 'blue', 'green', '#9c27b0', '#ffc107'],\n            'dataset': [],\n            'clear_split': false,\n            'num_data': 0,\n            'announcement': null,\n            'tooltip': false,\n            'current_coord': null,\n            'showMoreNodesPopup': false,\n            'preview_left': '0px',\n            'preview_top': '0px',\n            'preview_width': '0px',\n            'preview_height': '0px'\n        }\n\n        this.updateActiveClass = this.updateActiveClass.bind(this);\n        this.updateChange = this.updateChange.bind(this);\n        this.createClass = this.createClass.bind(this);\n        this.getCoord = this.getCoord.bind(this);\n        this.construct_dataset = this.construct_dataset.bind(this)\n    }\n\n    componentDidMount() {\n        let cells = [];\n        for(let i=0; i<this.props.height; i++) {\n            let row = [];\n            for(let j=0; j<this.props.width; j++) {\n                row.push(null)\n            }\n            cells.push(row);\n        }\n        let sub_data = [{\n            coord_1: [0, 0],\n            coord_2: [39, 39]\n        }]\n\n        this.setState({\n            data: cells,\n            sub_data: sub_data\n        })\n    }\n\n    getCoord = (i, j) => {\n        if(this.state.classes.length === 0)\n            return\n\n        let data = [...this.state.data]\n        let num_data = this.state.num_data\n\n        if(data[i][j] !== null) {\n            data[i][j] = null\n            num_data -= 1\n        }else {\n            if(num_data >= 40) {\n                this.setState({\n                    announcement: \"No more datapoints can be plotted. Please remove existing datapoints.\"\n                })\n                setTimeout(() => {this.setState({\n                    announcement: null\n                })}, 5000)\n                return\n            }\n            data[i][j] = this.state.activeClass\n            num_data += 1\n        }\n            \n        this.setState({\n            data: data,\n            num_data: num_data\n        })\n\n        this.construct_dataset()\n    }\n\n    updateActiveClass = (c, idx) => {\n        let classes = this.state.classes\n        if(c.name !== \"\") {\n            let exists = false\n            classes.forEach((cls) => {\n                if(cls.name === c.name && cls.color !== c.color) {\n                    exists = true\n                    return\n                }\n            })\n\n            if(exists) {\n                classes[idx].error = \"Class already exist. Try different name\"\n                classes[idx].msg = \"\"\n            }else{\n                classes[idx].msg = \"You can now start adding data corresponding to this class in the plot\"\n                classes[idx].error = \"\"\n                this.setState({\n                    'activeClass': c\n                });\n            }\n        }else{\n            classes[idx].error = \"Specify name first\"\n            classes[idx].msg = \"\"\n        }\n        this.setState({\n            'classes': classes\n        });\n    }\n\n    removeClass = (c) => {\n        // Remove every point from the plot\n        let data = this.state.data;\n        for(let i=0; i<data.length; i++) {\n            for(let j=0; j<data[i].length; j++) {\n                if(data[i][j] !== null && data[i][j].name === c.name) {\n                    data[i][j] = null;\n                }\n            }\n        }\n\n        // Remove the class from state\n        let classes = this.state.classes;\n        classes = classes.filter((cls) => {\n            return cls.name !== c.name\n        })\n\n        this.setState({\n            data: data,\n            classes: classes\n        })\n\n        // clear decision boundaries\n        this.clearSplits()\n        this.removeDataset(c)\n    }\n\n    removeDataset = (c) => {\n        let dataset = [...this.state.dataset]\n        dataset = dataset.filter((d) => {\n            return d.class !== c.name\n        })\n\n        this.setState({\n            dataset: dataset\n        })\n    }\n\n    // Adds class input fields\n    createClass = () => {\n        let classes = this.state.classes\n        let used_colors = []\n        let assigned_color = null;\n        \n        classes.forEach((cls) => {\n            used_colors.push(cls.color)\n        })\n\n        this.state.colors.reverse().forEach((color) => {\n            let u = false\n            used_colors.forEach((used) => {\n                if(used === color)\n                    u = true\n            })\n\n            if(!u) {\n                assigned_color = color\n                return\n            }\n        })\n        \n\n        classes.push({\n            name: '',\n            color: assigned_color,\n            error: '',\n            msg: ''\n        })\n\n        this.setState({\n            classes: classes\n        })\n    }\n\n    updateChange = (e, idx, attr) => {\n        let classes = this.state.classes\n        classes[idx][attr] = e\n        this.setState({\n            classes: classes\n        })\n    }\n\n    draw_cell = (i, j, cell) => {\n        let rightBorder = ''\n        let topBorder = ''\n\n        this.state.lines.forEach((line) => {\n            let x1 = line.x1\n            let x2 = line.x2\n\n            if(i >= x2[0] && i <= x2[1] && j >= x1[0] && j <= x1[1]) {\n\n                for(let i2=x2[0]; i2<=x2[1]; i2++) {\n                    for(let j2=x1[0]; j2<=x1[1]; j2++) {\n                        if(i === i2 && j === j2) {\n                            if(line.type === 'h') {\n                                topBorder = 'top-border'\n                            }else{\n                                rightBorder = 'right-border'\n                            }\n                            return\n                        }\n                    }\n                }\n            }\n        })\n\n        return(\n            <div key={i + \" - \" + j} className={\"cell \" + rightBorder + \" \" + topBorder} onClick={() => this.getCoord(i, j)} \n                onMouseOver={(e) => this.setState({tooltip: true, current_coord: \"x=\" + j + \", y=\" + (39-i)})}\n                onMouseOut={(e) => this.setState({tooltip: false})}>\n                {cell ? <div className=\"assigned\" style={{backgroundColor: cell.color}}></div> : ''}\n            </div>\n        )\n    }\n\n    getSplits = (split, sub_data) => {\n        let lines = this.state.lines\n        let q1 = null, q2 = null\n\n        if(split.axis === 'x1') {\n            let col = split.value - 0.5\n            lines.push({\n                x1: [col, col],\n                x2: [sub_data.coord_1[1], sub_data.coord_2[1]],\n                type: 'v'\n            })\n\n            // left part\n            if(col > 0) {\n                q1 = {\n                    coord_1: [...sub_data.coord_1],\n                    coord_2: [col, sub_data.coord_2[1]]\n                }\n            }\n\n            // right part\n            if(col < 39) {\n                q2 = {\n                    coord_1: [col + 1, sub_data.coord_1[1]],\n                    coord_2: [...sub_data.coord_2]\n                }\n            }\n            \n        }else{\n            let row = split.value - 0.5\n            lines.push({\n                x1: [sub_data.coord_1[0], sub_data.coord_2[0]],\n                x2: [39 - row, 39 - row],\n                type: 'h'\n            })\n\n            // bottom part\n            if(row > 0) {\n                q1 = {\n                    coord_1: [sub_data.coord_1[0], 39 - row],\n                    coord_2: [...sub_data.coord_2]\n                }\n            }\n\n            // top part\n            if(row < 39) {\n                q2 = {\n                    coord_1: [...sub_data.coord_1],\n                    coord_2: [sub_data.coord_2[0], 39 - row - 1]\n                }\n            }\n        }\n\n        let data = [...this.state.sub_data]\n        \n        if(q1 !== null)\n            data.push(q1)\n\n        if(q2 !== null)\n            data.push(q2)\n\n        this.setState({\n            lines: lines,\n            sub_data: data,\n            showMoreNodesPopup: true\n        })\n\n        setTimeout(() => {\n            this.setState({showMoreNodesPopup: false})\n        }, 5000)\n    }\n\n    clearSplits = () => {\n        let subdata = [...this.state.sub_data]\n        subdata = subdata.slice(0, 1)\n        this.setState({\n            lines: [],\n            sub_data: subdata,\n            clear_split: true,\n            preview_height: '0px',\n            preview_width: '0px',\n            preview_left: '0px',\n            preview_top: '0px'\n        })\n    }\n\n    showCreateClassButton = () => {\n        return(\n            <div className=\"row\">\n                <div className=\"col-12-sm\" style={{textAlign: \"center\"}}>\n                    <button className=\"create-class-btn\" onClick={this.createClass}>\n                        Create Class\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    construct_dataset = () => {\n        let data = []\n        for(let i=0; i<this.state.data.length; i++) {\n            for(let j=0; j<this.state.data[i].length; j++) {\n                if(this.state.data[i][j] !== null) {\n                    data.push({\n                        x1: j,\n                        x2: this.state.data.length - 1 - i,\n                        class: this.state.data[i][j].name,\n                        color: this.state.data[i][j].color\n                    })\n                }\n            }\n        }\n\n        this.clearSplits()\n\n        this.setState({\n            dataset: data\n        })\n    }\n\n    updateClearSplitState = () => {\n        if (this.state.clear_split) {\n            this.setState({\n                clear_split: false\n            })\n        }\n    }\n\n    showAnnouncement = () => {\n        if(this.state.announcement != null) {\n            return(\n                <div className=\"row\">\n                    <div className=\"col-12 announcement\">\n                        {this.state.announcement}\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    showNodePopup = () => {\n        return(\n            <div className=\"popup-message-container row\">\n                <div className=\"col-3\"></div>\n                <Animated animationIn=\"bounceInUp\" animationOut=\"bounceOutDown\" isVisible={this.state.showMoreNodesPopup}>\n                <div className=\"popup-message col-6\">\n                    Split has been made in the plot and more nodes are added at the bottom!\n                </div>\n                </Animated>\n                <div className=\"col-3\"></div>\n            </div>\n        )\n    }\n\n    previewSplit = (subdata) => {\n        this.setState({\n            preview_left: subdata.coord_1[0] * 10 + 'px',\n            preview_top: subdata.coord_1[1] * 10 + 'px',\n            preview_width: (subdata.coord_2[0] + 1)*10 - subdata.coord_1[0] * 10 + 'px',\n            preview_height: (subdata.coord_2[1] + 1)*10 - subdata.coord_1[1] * 10 + 'px'\n        })\n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"left-pane\">\n                    <div className=\"spacer\"></div>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div style={{minWidth: \"440px\"}}>\n                                        <div className=\"tick-x2-container\">\n                                            <div className=\"x2-tick\" style={{paddingTop: \"35px\"}}>35</div>\n                                            <div className=\"x2-tick\">30</div>\n                                            <div className=\"x2-tick\">25</div>\n                                            <div className=\"x2-tick\" style={{paddingTop: \"27px\"}}>20</div>\n                                            <div className=\"x2-tick\">15</div>\n                                            <div className=\"x2-tick\" style={{paddingTop: \"27px\"}}>10</div>\n                                            <div className=\"x2-tick\" style={{height: \"85px\"}}>5</div>\n                                        </div>\n                                        <div className=\"plot-container\">\n                                            {\n                                                this.state.data.map((row, i) => {\n                                                    return row.map((cell, j) => {\n                                                        return this.draw_cell(i, j, cell)\n                                                    })\n                                                })\n                                            }\n\n                                            <div className=\"preview-overlay\" style={{left: this.state.preview_left, top: this.state.preview_top, width: this.state.preview_width, height: this.state.preview_height}}></div>\n                                        </div>\n                                        <div className=\"tick-x1-container\">\n                                            <div className=\"x1-tick\" style={{width: \"10px\"}}>0</div>\n                                            <div className=\"x1-tick\" style={{width: \"50px\"}}>5</div>\n                                            <div className=\"x1-tick\" style={{width: \"55px\"}}>10</div>\n                                            <div className=\"x1-tick\">15</div>\n                                            <div className=\"x1-tick\">20</div>\n                                            <div className=\"x1-tick\">25</div>\n                                            <div className=\"x1-tick\">30</div>\n                                            <div className=\"x1-tick\">35</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    {this.showAnnouncement()}\n                                </div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"neu-2 class-entry-container\">\n                                        {this.state.classes.map((cls, key) => {\n                                            return(\n                                                <div key={key} className=\"class-container\">\n                                                    <div className=\"row\">\n                                                        <div className=\"col-12\">\n                                                            <div className=\"selected_color\" style={{backgroundColor: cls.color}}></div>\n                                                            <input className=\"class-text\" type=\"text\" placeholder=\"Class Name\" value={this.state.classes[key].name} onChange={e => this.updateChange(e.target.value, key, 'name')}/>\n                                                            <div className=\"remove-class-btn\" onClick={() => this.removeClass(cls)}>X</div>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"row\">    \n                                                        <div className=\"col-12-sm\">\n                                                            <center>\n                                                            <button className={this.state.activeClass === cls ? \"add-to-graph-selected\": \"add-to-graph\"} onClick={() => this.updateActiveClass(cls, key)}>\n                                                                {this.state.activeClass === cls ? \"Selected\": \"Add to plot\"}\n                                                            </button>\n                                                            </center>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"row\">    \n                                                        <div className=\"col-12-sm\">\n                                                            <center>\n                                                            {this.state.activeClass === cls ? cls.msg: cls.error}\n                                                            </center>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            )\n                                        })}\n\n                                        {this.state.classes.length < 5 ? this.showCreateClassButton(): null}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <MouseTooltip\n                        className=\"tooltip\"\n                        visible={this.state.tooltip}\n                        offsetX={15}\n                        offsetY={10}>\n                        <span>{this.state.current_coord}</span>\n                    </MouseTooltip>\n                </div>\n\n\n\n                <div className=\"right-pane\">\n                    <div className=\"row\" style={{height: \"100%\"}}>\n                        <div className=\"col-12\">\n                            <div className=\"row\">\n                                <div className=\"col-12-sm\">\n                                    <h1 className=\"site-title\">Interactive Decision Trees</h1>\n                                </div>\n                            </div>\n                            <Dataset \n                                data={this.state.data} \n                                subdata={this.state.sub_data} \n                                dataset={this.state.dataset} \n                                classes={this.state.classes}\n                                clearSplitState={this.state.clear_split} \n                                onSplitSelected={this.getSplits} \n                                onClearClassification={this.clearSplits}\n                                onPreview={this.previewSplit}\n                                onUpdateClearSplitState={this.updateClearSplitState} />\n\n                            {this.state.showMoreNodesPopup ? this.showNodePopup(): null}\n                        </div>\n                    </div>\n                    <Footer />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Plot;","import React from 'react';\nimport Plot from './components/Plot'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      'plot_width': 40,\n      'plot_height': 40\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Plot width={this.state.plot_width} height={this.state.plot_height} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}