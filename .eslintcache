[{"/Users/shubhomoybiswas/projects/interactive-tree/src/index.js":"1","/Users/shubhomoybiswas/projects/interactive-tree/src/App.js":"2","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Plot.js":"3","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Dataset.js":"4","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Misclassification.js":"5","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Gini.js":"6","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Entropy.js":"7","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Footer.js":"8","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Plot2.js":"9","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Classes.js":"10","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Announcement.js":"11","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Cell.js":"12"},{"size":219,"mtime":1609958011360,"results":"13","hashOfConfig":"14"},{"size":3732,"mtime":1610734547345,"results":"15","hashOfConfig":"14"},{"size":21295,"mtime":1610669845632,"results":"16","hashOfConfig":"14"},{"size":9924,"mtime":1610665231531,"results":"17","hashOfConfig":"14"},{"size":15228,"mtime":1610660848184,"results":"18","hashOfConfig":"14"},{"size":15946,"mtime":1610669841845,"results":"19","hashOfConfig":"14"},{"size":15020,"mtime":1610663564394,"results":"20","hashOfConfig":"14"},{"size":470,"mtime":1610157112384,"results":"21","hashOfConfig":"14"},{"size":12065,"mtime":1610734656883,"results":"22","hashOfConfig":"14"},{"size":5572,"mtime":1610731697862,"results":"23","hashOfConfig":"14"},{"size":320,"mtime":1610728506819,"results":"24","hashOfConfig":"14"},{"size":1492,"mtime":1610735036283,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1pxsc3p",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/shubhomoybiswas/projects/interactive-tree/src/index.js",[],["54","55"],"/Users/shubhomoybiswas/projects/interactive-tree/src/App.js",["56","57"],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Plot.js",[],["58","59"],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Dataset.js",[],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Misclassification.js",["60"],"import React from 'react'\nimport MouseTooltip from 'react-sticky-mouse-tooltip';\n\nclass Misclassification extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            selected_split: null,\n            min_error: 99999,\n            tooltip: false,\n            calculation: ''\n        }\n        this.setSplit = this.setSplit.bind(this)\n    }\n\n    get_top = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_bottom = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x2 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_left = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 < pivot) {\n                data.push(dataset[i])\n            }\n        }\n\n        return data;\n    }\n\n    get_right = (pivot, dataset) => {\n        let data = []\n        for(let i=0; i<dataset.length; i++) {\n            if(dataset[i].x1 > pivot) {\n                data.push(dataset[i])\n            }\n        }\n        return data;\n    }\n\n    get_max_class_num = (dataset) => {\n        let class_freq = {}\n        let max = 0\n        let calculation = ''\n        dataset.forEach((data) => {\n            class_freq[data.class] = (class_freq[data.class] || 0) + 1\n            if(class_freq[data.class] > max)\n                max = class_freq[data.class]\n        })\n        \n        return max\n    }\n\n    calculate_x1 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x1 > b.x1 ? 1 : -1)\n        let x1_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x1_pivot = dataset[i].x1 + 0.5\n            \n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x1_pivot === x1_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let left_data = this.get_left(x1_pivot, dataset)\n            let right_data = this.get_right(x1_pivot, dataset)\n\n            let missclass_left = 1 - (this.get_max_class_num(left_data) / left_data.length)\n            let calculation_left = \"1 - (\" + this.get_max_class_num(left_data) + \"/\" + left_data.length + \") = \" + Math.trunc((isNaN(missclass_left) ? 0: missclass_left)*100)/100\n\n            let missclass_right = 1 - (this.get_max_class_num(right_data) / right_data.length)\n            let calculation_right = \"1 - (\" + this.get_max_class_num(right_data) + \"/\" + right_data.length + \") = \" + Math.trunc((isNaN(missclass_right) ? 0: missclass_right)*100)/100\n\n            missclass_left = isNaN(missclass_left) ? 0: missclass_left\n            missclass_right = isNaN(missclass_right) ? 0: missclass_right\n\n            let missclassification = (missclass_left * left_data.length) + (missclass_right * right_data.length)\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x1_pivot: x1_pivot,\n                missclassification: missclassification,\n                q1: missclass_left,\n                q2: missclass_right,\n                left_data: left_data,\n                right_data: right_data,\n                calculation_left: calculation_left,\n                calculation_right: calculation_right\n            })\n        }\n        return result\n    }\n\n    calculate_x2 = () => {\n        let dataset = [...this.props.dataset];\n        dataset = dataset.sort((a, b) => a.x2 > b.x2 ? 1 : -1)\n        let x2_pivot = 0\n\n        let result = []\n        for(let i=0; i<dataset.length; i++) {\n            x2_pivot = dataset[i].x2 + 0.5\n\n            // Check if already threshold has been calculated or not\n            let exists = false\n            for(let i=0; i<result.length; i++) {\n                if(result[i].x2_pivot === x2_pivot) {\n                    exists = true;\n                    break;\n                }\n            }\n            if(exists)\n                continue\n\n            let top_data = this.get_top(x2_pivot, dataset)\n            let bottom_data = this.get_bottom(x2_pivot, dataset)\n\n            let missclass_top = 1 - (this.get_max_class_num(top_data) / top_data.length)\n            let calculation_top = \"1 - (\" + this.get_max_class_num(top_data) + \"/\" + top_data.length + \") = \" + Math.trunc((isNaN(missclass_top) ? 0: missclass_top)*100)/100\n\n            let missclass_bottom = 1 - (this.get_max_class_num(bottom_data) / bottom_data.length)\n            let calculation_bottom = \"1 - (\" + this.get_max_class_num(bottom_data) + \"/\" + bottom_data.length + \") = \" + Math.trunc((isNaN(missclass_bottom) ? 0: missclass_bottom)*100)/100\n\n            missclass_top = isNaN(missclass_top) ? 0: missclass_top\n            missclass_bottom = isNaN(missclass_bottom) ? 0: missclass_bottom\n\n            let missclassification = (missclass_top * top_data.length) + (missclass_bottom * bottom_data.length)\n\n            if(missclassification < this.state.min_error) {\n                this.setState({min_error: missclassification})\n            }\n            result.push({\n                x2_pivot: x2_pivot,\n                missclassification: missclassification,\n                q1: missclass_bottom,\n                q2: missclass_top,\n                top_data: top_data,\n                bottom_data: bottom_data,\n                calculation_top: calculation_top,\n                calculation_bottom: calculation_bottom\n            })\n        }\n        return result\n    }\n\n    setSplit = (x, val) => {\n        if(this.state.selected_split !== null && !this.props.clearSplitState) {\n            return\n        }\n        if(this.props.clearSplitState) {\n            this.props.onUpdateClearSplitState()\n        }\n\n        let selected_split = {\n            'axis': x,\n            'value': val\n        }\n        this.setState({\n            selected_split: selected_split\n        })\n\n        this.props.onSplitSelected(selected_split, this.props.subdata)\n    }\n\n    preview = (subdata) => {\n        this.props.onPreview(subdata)\n    }\n\n    showToolTip = (text) => {\n        this.setState({\n            tooltip: true,\n            calculation: text\n        })\n    }\n\n    hideToolTip = () => {\n        this.setState({\n            tooltip: false,\n            calculation: ''\n        })\n    }\n\n    render() {\n        let split_x1 = this.calculate_x1()\n        let split_x2 = this.calculate_x2()\n        return(\n            <div className=\"neu preview-node-container\">\n                <h3>Node {this.props.node}</h3>\n                <div className=\"help-text\">Click on the desired threshold to split the node and create a decision boundary. After every split, new nodes are added at the bottom</div>\n                <table width=\"100%\" className=\"split-table\" onMouseOver={() => {this.preview(this.props.subdata)}}>\n                    <tbody>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Left Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Right Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Missclassification (rounded)<br />\n                                n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        {\n                            split_x1.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"table-data\"} onClick={() => this.setSplit('x1', s.x1_pivot)}>\n                                        <td>\n                                            {s.left_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_left)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>x {\"<\"} {s.x1_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.right_data.length}\n                                        </td>\n                                        <td  onMouseOver={() => {this.showToolTip(s.calculation_right)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x1\" && this.state.selected_split.value === s.x1_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                        <tr>\n                            <td colSpan=\"7\">\n                                <hr className=\"dashed-line\" />\n                            </td>\n                        </tr>\n                        <tr className=\"table-header\">\n                            <td>\n                                n1\n                            </td>\n                            <td>\n                                Q1 <br />(Bottom Region)\n                            </td>\n                            <td className=\"highlighted-column-1\">\n                                Threshold\n                            </td>\n                            <td>\n                                n2\n                            </td>\n                            <td>\n                                Q2 <br />(Top Region)\n                            </td>\n                            <td className=\"highlighted-column-2\">\n                                Missclassification (rounded)<br />\n                                n1*Q1 + n2*Q2\n                            </td>\n                            <td></td>\n                        </tr>\n                        \n                        \n\n                        {\n                            split_x2.map((s, idx) => {\n                                if(isNaN(s.q1))\n                                    s.q1 = 0\n                                if(isNaN(s.q2))\n                                    s.q2 = 0\n                                return(\n                                    <tr key={idx} className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"table-data\"\n                                    } onClick={() => this.setSplit('x2', s.x2_pivot)}>\n                                        <td>\n                                            {s.bottom_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_bottom)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q1 * 100) / 100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-1\"}>\n                                            <b>y {\"<\"} {s.x2_pivot}</b>\n                                        </td>\n                                        <td>\n                                            {s.top_data.length}\n                                        </td>\n                                        <td onMouseOver={() => {this.showToolTip(s.calculation_top)}} onMouseOut={() => this.hideToolTip()}>\n                                            {Math.trunc(s.q2 * 100) /100}\n                                        </td>\n                                        <td className={\n                                        (this.state.selected_split!== null && this.state.selected_split.axis === \"x2\" && this.state.selected_split.value === s.x2_pivot) ? \"table-data-selected\": \"highlighted-column-2\"}>\n                                            {Math.trunc(s.missclassification*100) / 100}\n                                        </td>\n                                        <td className=\"recommended\">\n                                            {s.missclassification === this.state.min_error ? \"Recommended\" : null}\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                \n                </table>\n                <div className=\"spacer\"></div>\n                <MouseTooltip\n                        className=\"tooltip\"\n                        visible={this.state.tooltip}\n                        offsetX={15}\n                        offsetY={10}>\n                        <span>{this.state.calculation}</span>\n                </MouseTooltip>\n            </div>\n        )\n    }\n}\n\nexport default Misclassification;","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Gini.js",[],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Entropy.js",[],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Footer.js",[],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Plot2.js",["61","62","63"],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Classes.js",[],"/Users/shubhomoybiswas/projects/interactive-tree/src/components/Announcement.js",["64"],"import React from 'react'\n\nclass Announcement extends React.Component {\n    redner() {\n        return(\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {/* {this.showAnnouncement()} */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Announcement","/Users/shubhomoybiswas/projects/interactive-tree/src/components/Cell.js",["65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":20},{"ruleId":"70","severity":1,"message":"74","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":20},{"ruleId":"66","replacedBy":"75"},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","severity":1,"message":"77","line":63,"column":13,"nodeType":"72","messageId":"73","endLine":63,"endColumn":24},{"ruleId":"70","severity":1,"message":"78","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":15},{"ruleId":"70","severity":1,"message":"79","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":14},{"ruleId":"70","severity":1,"message":"74","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":3,"column":7,"nodeType":"72","messageId":"73","endLine":3,"endColumn":19},{"ruleId":"70","severity":1,"message":"74","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":20},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Announcement' is defined but never used.","Identifier","unusedVar","'MouseTooltip' is defined but never used.",["80"],["81"],"'calculation' is assigned a value but never used.","'Dataset' is defined but never used.","'Footer' is defined but never used.","no-global-assign","no-unsafe-negation"]